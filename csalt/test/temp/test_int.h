// ================================================================================
// ================================================================================
// - File:    test_int.h
// - Purpose: Describe the file purpose here
//
// Source Metadata
// - Author:  Jonathan A. Webb
// - Date:    August 31, 2022
// - Version: 1.0
// - Copyright: Copyright 2022, Jon Webb Inc.
// ================================================================================
// ================================================================================
// Include modules here

#ifndef test_int_struct_H
#define test_int_struct_H

#include <stdio.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <stdint.h>
#include <cmocka.h>
// ================================================================================ 
// ================================================================================ 

void test_init_int_vector_success(void **state);
// --------------------------------------------------------------------------------

void test_init_int_vector_zero_size(void **state);
// -------------------------------------------------------------------------------- 

void test_init_int_array_success(void **state);
// --------------------------------------------------------------------------------

void test_free_int_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_free_int_vector_static(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_int_vector_gbc(void **state);
#endif
// ================================================================================ 
// ================================================================================ 

void test_push_back_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_int_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_int_static(void **state);
// -------------------------------------------------------------------------------- 

void test_generic_int_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_int_vector_index(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_int_special_values(void **state);
// --------------------------------------------------------------------------------

void test_int_static_array_bounds(void **state);
// --------------------------------------------------------------------------------

void test_int_static_array_index_bounds(void **state);
// --------------------------------------------------------------------------------

void test_int_static_array_initialization(void **state);
// -------------------------------------------------------------------------------- 

void test_int_static_array_free(void **state);
// ================================================================================ 
// ================================================================================ 

void test_push_int_front_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_int_front_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_int_front_static(void **state);
// -------------------------------------------------------------------------------- 

void test_push_int_front_special_values(void **state);
// -------------------------------------------------------------------------------- 

void test_push_int_front_error_cases(void **state);
// ================================================================================ 
// ================================================================================ 

void test_insert_int_vector_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_int_vector_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_int_array_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_int_array_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_int_error_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_special_int_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_back_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_int_empty(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_int_errors(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_special_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_int_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_front_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_int_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_int_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_special_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_int_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_any_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_int_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_int_static(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_special_int_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_reverse_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_int_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_int_static(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_special_int_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_sort_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_int_edge_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_int_duplicates(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_special_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_static_int_array(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_int_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_trim_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_empty_int_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_static_int_array(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_already_int_optimal(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_int_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_binary_search_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_int_with_sort(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_int_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_int_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_update_int_vector_nominal(void **state);
// -------------------------------------------------------------------------------- 

void test_update_int_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_update_int_vector_bad_index(void **state);
// ================================================================================ 
// ================================================================================ 

void test_min_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_max_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_special_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_static_int_array(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_int_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_sum_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_average_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_special_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_int_negative(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_int_static(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_int_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_stdev_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_single_int_value(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_same_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_cum_sum_int_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_cum_sum_special_int_values(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_cum_sum_int_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_init_int_dict(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_int_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_int_dict_duplicate(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_int_dict_null(void** state);
// -------------------------------------------------------------------------------- 

void test_get_int_dict_value_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_get_int_dict_value_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_update_int_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_update_int_dict_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_pop_int_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_pop_int_dict_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_resize_int_behavior(void** state);
// -------------------------------------------------------------------------------- 

void test_get_keys_int_dict(void** state);
// -------------------------------------------------------------------------------- 

void test_get_values_int_dict(void** state);
// -------------------------------------------------------------------------------- 

int teardown_int(void **state);
// -------------------------------------------------------------------------------- 

int setup_int(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_int_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_foreach_int_dict_empty(void** state);
// -------------------------------------------------------------------------------- 

void test_foreach_int_dict_null(void** state);
// -------------------------------------------------------------------------------- 

void test_dictionary_int_gbc(void **state);
// ================================================================================ 
// ================================================================================ 

void test_int_vector_dictionary(void **state);
// -------------------------------------------------------------------------------- 

void test_int_vector_dictionary_resize(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_int_vector_dictionary_gbc(void **state);
#endif
// -------------------------------------------------------------------------------- 

void test_pop_int_vector_dictionary(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_intv_dict_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_intv_size_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_intv_dict_success(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_intv_dict_null_input(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_intv_dict_static_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_intv_dict_multiple_entries(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_intv_dict_independence(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_intv_dict_no_overwrite(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_intv_dict_overwrite(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_intv_dict_reject_static(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_intv_dict_null_inputs(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_intv_dict_unique_keys(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_intv_dict_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_intv_dict_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_intv_dict_reuse_after_clear(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_intv_dict_counts_keys(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_intv_dict_with_null_dict(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_intv_dict_with_null_callback(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_intv_dict_accumulates_sum(void **state);
// ================================================================================ 
// ================================================================================ 

void test_int_bin_bounds_exact_middle(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_exact_first(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_exact_last(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_near_hit_within_tol(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_near_miss_outside_tol(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_inrange_miss(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_below_range(void **state);
// -------------------------------------------------------------------------------- 

void test_int_bin_bounds_above_range(void **state);
// ================================================================================ 
// ================================================================================ 
#endif /* test_int_struct_H */
// ================================================================================
// ================================================================================
// eof
