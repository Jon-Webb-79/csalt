// ================================================================================
// ================================================================================
// - File:    test_vector.c
// - Purpose: Describe the file purpose here
//
// Source Metadata
// - Author:  Jonathan A. Webb
// - Date:    August 31, 2022
// - Version: 1.0
// - Copyright: Copyright 2022, Jon Webb Inc.
// ================================================================================
// ================================================================================
// Include modules here

#ifndef test_ldble_struct_H
#define test_ldble_struct_H

#include <stdio.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <stdint.h>
#include <cmocka.h>
// ================================================================================ 
// ================================================================================ 

void test_init_ldouble_vector_success(void **state);
// --------------------------------------------------------------------------------

void test_init_ldouble_vector_zero_size(void **state);
// --------------------------------------------------------------------------------

void test_init_ldouble_array_success(void **state);
// -------------------------------------------------------------------------------- 

void test_free_ldouble_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_free_ldouble_vector_static(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    /* GC Tests */
    void test_ldouble_vector_gbc(void **state);
#endif
// ================================================================================ 
// ================================================================================

void test_push_back_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_ldouble_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_ldouble_static(void **state);
// -------------------------------------------------------------------------------- 

void test_generic_ldouble_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_vector_ldouble_index(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_static_array_ldouble_bounds(void **state);
// --------------------------------------------------------------------------------

void test_static_array_index_ldouble_bounds(void **state);
// --------------------------------------------------------------------------------

void test_static_array_ldouble_initialization(void **state);
// -------------------------------------------------------------------------------- 

void test_static_array_ldouble_free(void **state);
// ================================================================================ 
// ================================================================================ 

void test_push_front_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_ldouble_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_ldouble_static(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_error_ldouble_cases(void **state);
// ================================================================================ 
// ================================================================================

void test_insert_vector_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_vector_ldouble_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_array_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_array_ldouble_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_error_ldouble_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_special_ldouble_values(void **state);
// ================================================================================ 
// ================================================================================

void test_pop_back_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_ldouble_empty(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_ldouble_errors(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_ldouble_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_front_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_ldouble_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_ldouble_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_ldouble_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_any_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_ldouble_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_ldouble_static(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_special_ldouble_values(void **state);
// ================================================================================ 
// ================================================================================

void test_reverse_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_ldouble_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_ldouble_static(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_special_ldouble_values(void **state);
// ================================================================================
// ================================================================================ 

void test_sort_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_edge_ldouble_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_ldouble_duplicates(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_static_ldouble_array(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_ldouble_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_trim_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_empty_ldouble_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_static_ldouble_array(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_already_ldouble_optimal(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_ldouble_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_binary_search_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_ldouble_tolerance(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_with_ldouble_sort(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_ldouble_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_ldouble_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_update_ldouble_vector_nominal(void **state);
// --------------------------------------------------------------------------------

void test_update_ldouble_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_update_ldouble_vector_bad_index(void **state);
// ================================================================================ 
// ================================================================================ 

void test_min_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_max_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_static_ldouble_array(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_ldouble_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_sum_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_average_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_special_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_ldouble_negative(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_ldouble_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_stdev_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_single_ldouble_value(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_same_ldouble_values(void **state);
// -------------------------------------------------------------------------------- 

void test_cum_sum_ldouble_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_cum_sum_ldouble_negative(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_cum_sum_ldouble_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_init_ldouble_dict(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_ldouble_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_ldouble_dict_duplicate(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_ldouble_dict_null(void** state);
// -------------------------------------------------------------------------------- 

void test_get_ldouble_dict_value_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_get_ldouble_dict_value_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_update_ldouble_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_update_ldouble_dict_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_pop_ldouble_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_pop_ldouble_dict_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_resize_ldouble_behavior(void** state);
// -------------------------------------------------------------------------------- 

void test_get_keys_ldouble_dict(void** state);
// -------------------------------------------------------------------------------- 

void test_get_values_ldouble_dict(void** state);
// -------------------------------------------------------------------------------- 

int teardown_ldouble(void **state);
// -------------------------------------------------------------------------------- 

int setup_ldouble(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldouble_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldouble_dict_empty(void** state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldouble_dict_null(void** state);
// ================================================================================ 
// ================================================================================ 

void test_vector_ldouble_dictionary(void **state);
// -------------------------------------------------------------------------------- 

void test_vector_dictionary_ldouble_resize(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_vector_dictionary_ldouble_gbc(void **state);
#endif
// -------------------------------------------------------------------------------- 

void test_pop_vector_ldouble_dictionary(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_ldoublev_dict_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_ldoublev_size_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_ldoublev_dict_success(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_ldoublev_dict_null_input(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_ldoublev_dict_static_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_ldoublev_dict_multiple_entries(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_ldoublev_dict_independence(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_ldoublev_dict_no_overwrite(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_ldoublev_dict_overwrite(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_ldoublev_dict_reject_static(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_ldoublev_dict_null_inputs(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_ldoublev_dict_unique_keys(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_ldoublev_dict_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_ldoublev_dict_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_ldoublev_dict_reuse_after_clear(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldoublev_dict_counts_keys(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldoublev_dict_with_null_dict(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldoublev_dict_with_null_callback(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_ldoublev_dict_accumulates_sum(void **state);
// ================================================================================ 
// ================================================================================ 

void test_ldouble_bin_bounds_exact_middle(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_exact_first(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_exact_last(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_near_hit_within_tol(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_near_miss_outside_tol(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_inrange_miss(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_below_range(void **state);
// -------------------------------------------------------------------------------- 

void test_ldouble_bin_bounds_above_range(void **state);
// ================================================================================
// ================================================================================
#endif
// eof
