// ================================================================================
// ================================================================================
// - File:    test_vector.h
// - Purpose: Describe the file purpose here
//
// Source Metadata
// - Author:  Jonathan A. Webb
// - Date:    August 31, 2022
// - Version: 1.0
// - Copyright: Copyright 2022, Jon Webb Inc.
// ================================================================================
// ================================================================================
// Include modules here

#ifndef test_dble_struct_H
#define test_dble_struct_H

#include <stdio.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <stdint.h>
#include <cmocka.h>
// ================================================================================ 
// ================================================================================ 

void test_init_double_vector_success(void **state);
// --------------------------------------------------------------------------------

void test_init_double_vector_zero_size(void **state);
// -------------------------------------------------------------------------------- 

void test_init_double_array_success(void **state);
// --------------------------------------------------------------------------------

void test_free_double_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_free_double_vector_static(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_double_vector_gbc(void **state);
#endif
// ================================================================================ 
// ================================================================================ 

void test_push_back_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_double_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_double_static(void **state);
// -------------------------------------------------------------------------------- 

void test_generic_double_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_double_vector_index(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_special_double_values(void **state);
// --------------------------------------------------------------------------------

void test_static_array_double_bounds(void **state);
// --------------------------------------------------------------------------------

void test_static_array_index_double_bounds(void **state);
// --------------------------------------------------------------------------------

void test_static_array_doube_initialization(void **state);
// -------------------------------------------------------------------------------- 

void test_static_array_double_free(void **state);
// ================================================================================ 
// ================================================================================ 

void test_push_front_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_double_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_double_static(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_error_double_cases(void **state);
// ================================================================================ 
// ================================================================================ 

void test_insert_vector_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_vector_double_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_array_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_array_double_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_error_double_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_special_double_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_back_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_double_empty(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_double_errors(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_double_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_front_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_double_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_double_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_double_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_any_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_double_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_double_static(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_special_double_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_reverse_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_double_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_double_static(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_special_double_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_sort_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_edge_double_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_double_duplicates(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_static_double_array(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_double_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_trim_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_empty_double_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_static_double_array(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_already_double_optimal(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_double_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_binary_search_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_double_tolerance(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_with_double_sort(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_double_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_double_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_update_double_vector_nominal(void **state);
// -------------------------------------------------------------------------------- 

void test_update_double_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_update_double_vector_bad_index(void **state);
// ================================================================================ 
// ================================================================================ 

void test_min_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_max_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_static_double_array(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_double_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_sum_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_average_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_double_negative(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_double_static(void **state);
// -------------------------------------------------------------------------------- 

void test_sum_average_double_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_stdev_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_single_double_value(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_same_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_cum_sum_double_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_cum_sum_double_negative(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_cum_sum_special_double_values(void **state);
// -------------------------------------------------------------------------------- 

void test_stdev_cum_sum_double_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_init_double_dict(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_double_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_double_dict_duplicate(void** state);
// -------------------------------------------------------------------------------- 

void test_insert_double_dict_null(void** state);
// -------------------------------------------------------------------------------- 

void test_get_double_dict_value_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_get_double_dict_value_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_update_double_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_update_double_dict_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_pop_double_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_pop_double_dict_missing(void** state);
// -------------------------------------------------------------------------------- 

void test_resize_double_behavior(void** state);
// -------------------------------------------------------------------------------- 

void test_get_keys_double_dict(void** state);
// -------------------------------------------------------------------------------- 

void test_get_values_double_dict(void** state);
// -------------------------------------------------------------------------------- 

int teardown_double(void **state);
// -------------------------------------------------------------------------------- 

int setup_double(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_double_dict_basic(void** state);
// -------------------------------------------------------------------------------- 

void test_foreach_double_dict_empty(void** state);
// -------------------------------------------------------------------------------- 

void test_foreach_double_dict_null(void** state);
// -------------------------------------------------------------------------------- 

void test_dictionary_double_gbc(void **state);
// ================================================================================ 
// ================================================================================ 

void test_vector_double_dictionary(void **state);
// -------------------------------------------------------------------------------- 

void test_vector_dictionary_double_resize(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_vector_dictionary_double_gbc(void **state);
#endif
// -------------------------------------------------------------------------------- 

void test_pop_vector_double_dictionary(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_doublev_dict_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_doublev_size_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_doublev_dict_success(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_doublev_dict_null_input(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_doublev_dict_static_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_doublev_dict_multiple_entries(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_doublev_dict_independence(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_doublev_dict_no_overwrite(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_doublev_dict_overwrite(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_doublev_dict_reject_static(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_doublev_dict_null_inputs(void **state);
// -------------------------------------------------------------------------------- 

void test_merge_doublev_dict_unique_keys(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_doublev_dict_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_doublev_dict_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_clear_doublev_dict_reuse_after_clear(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_doublev_dict_counts_keys(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_doublev_dict_with_null_dict(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_doublev_dict_with_null_callback(void **state);
// -------------------------------------------------------------------------------- 

void test_foreach_doublev_dict_accumulates_sum(void **state);
// ================================================================================ 
// ================================================================================ 

void test_create_dense_double_matrix(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_and_get_dense_double_matrix(void **state);
// -------------------------------------------------------------------------------- 

void test_invalid_dense_double_insert(void **state);
// -------------------------------------------------------------------------------- 

void test_double_coo_conversion_from_dense(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_double_and_get_coo_matrix(void **state);
// --------------------------------------------------------------------------------

void test_duplicate_double_insert_coo_disallowed(void **state);
// -------------------------------------------------------------------------------- 

void test_double_csr_conversion_from_coo(void **state);
// -------------------------------------------------------------------------------- 

void test_get_after_double_csr_conversion(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_after_double_csr_conversion(void **state);
// -------------------------------------------------------------------------------- 

void test_get_double_matrix_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_double_matrix_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_double_matrix_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_get_double_matrix_null(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_double_matrix_null(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_double_matrix_null(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_double_matrix_gbc(void **state);
#endif
// -------------------------------------------------------------------------------- 

void test_double_identity_inverse(void **state); 
// -------------------------------------------------------------------------------- 

void test_double_known_inverse(void **state); 
// -------------------------------------------------------------------------------- 

void test_double_singular_matrix(void **state); 
// -------------------------------------------------------------------------------- 

void test_double_null_input(void **state); 
// -------------------------------------------------------------------------------- 

void test_double_non_square_matrix(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_dense_identity(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_dense_general(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_dense_rectangular(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_coo_identity(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_coo_rectangular(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_csr_identity(void **state);
// -------------------------------------------------------------------------------- 

void test_double_transpose_csr_rectangular(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_double_dense_matrix(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_double_coo_matrix(void **state);
// -------------------------------------------------------------------------------- 

void test_copy_double_csr_matrix(void **state);
// -------------------------------------------------------------------------------- 

void test_det_double_identity_3x3(void **state);
// -------------------------------------------------------------------------------- 

void test_det_double_singular_2x2(void **state);
// -------------------------------------------------------------------------------- 

void test_det_double_known_2x2(void **state);
// -------------------------------------------------------------------------------- 

void test_det_double_known_3x3(void **state);
// ================================================================================ 
// ================================================================================
#endif /* test_dble_struct_H */
// ================================================================================
// ================================================================================
// eof
